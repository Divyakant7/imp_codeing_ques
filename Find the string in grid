Given a 2D grid of n*m of characters and a word, find all occurrences of given word in grid. A word can be matched in all 8 directions at any point. Word is said be found in a direction if all characters match in this direction (not in zig-zag form). The 8 directions are, horizontally left, horizontally right, vertically up, vertically down and 4 diagonal directions.
 

Example 1:

Input: grid = {{a,b,c},{d,r,f},{g,h,i}},
word = "abc"
Output: {{0,0}}
Expalnation: From (0,0) one can find "abc"
in horizontally right direction.
Example 2:

Input: grid = {{a,b,a,b},{a,b,e,b},{e,b,e,b}}
,word = "abe"
Output: {{0,0},{0,2},{1,0}}
Explanation: From (0,0) one can find "abe" in 
right-down diagonal. From (0,2) one can
find "abe" in left-down diagonal. From
(1,0) one can find "abe" in Horizontally right 
direction.

const int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
   const int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
   bool helper(int i,int j,vector<vector<char>>grid,string word){
       int n = grid.size();
       int m =grid[0].size();
       for(int k = 0;k<8;k++){
           int newx = i+dx[k];
           int newy = j+dy[k];
           int index;
           for(index=1;index<word.length();index++){
               if(newx<0||newy<0||newx>=n||newy>=m||grid[newx][newy]!=word[index]){
                   break;
               }
               else{
                   newx+=dx[k];
                   newy+=dy[k];
               }
           }
           if(index==word.length()){
               return true;
           }
       }
       return false;
   }
	vector<vector<int>>searchWord(vector<vector<char>>grid, string word){
	    // Code here
	    int n = grid.size();
	    int m = grid[0].size();
	    vector<vector<int>>v;
	    for(int i=0;i<n;i++){
	        for(int j = 0;j<m;j++){
	            if(grid[i][j] == word[0]){
	                if(helper(i,j,grid,word)){
	                    v.push_back({i,j});
	                }
	            }
	        }
	    }
	    return v;
	}
