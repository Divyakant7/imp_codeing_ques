/*
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15

*/
class Solution {
public:
    int helper(vector<int>&nums,int k){
        int i =0;
        int sum = 0;
        int cnt = 0;
        if(k<0)return 0;
        for(int j=0;j<nums.size();j++){
            sum+=nums[j];
            while(i<nums.size()&&sum>k){
                sum -=nums[i];
                i++;
            }
            cnt+=j-i+1;
        }
        return cnt;
    }
    int numSubarraysWithSum(vector<int>& nums, int goal) {
      return helper(nums,goal) - helper(nums,goal-1);
    }
};
