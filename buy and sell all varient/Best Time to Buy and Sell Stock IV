You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        if(n<=1)return 0;
        int dp[k+1][n];
        memset(dp,0,sizeof(dp));
        for(int t =1;t<=k;t++){
            int mx = INT_MIN;
            for(int d = 1;d<n;d++){
                if(dp[t-1][d-1]-prices[d-1]>mx){
                    mx = dp[t-1][d-1]-prices[d-1];
                }
                if(mx+prices[d]>dp[t][d-1]){
                    dp[t][d] = mx+prices[d];
                }
                else{
                    dp[t][d] = dp[t][d-1];
                }
            }
        }
        return dp[k][n-1];
    }
