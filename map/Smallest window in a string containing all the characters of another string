Given two strings S and P. Find the smallest window in the string S consisting of all the characters(including duplicates) of the string P.  Return "-1" in case there is no such window present. In case there are multiple such windows of same length, return the one with the least starting index. 

Example 1:

Input:
S = "timetopractice"
P = "toc"
Output: 
toprac
Explanation: "toprac" is the smallest
substring in which "toc" can be found.

string smallestWindow (string s, string p)
    {
        // Your code here
        int i =0,j =0;
        int arr[256];
        unordered_map<char,int>mp;
        for(int i =0;i<p.length();i++){
            mp[p[i]]++;
        }
        int mn = INT_MAX;
        int count = mp.size();
        int start,end;
        while(j<s.length()){
            mp[s[j]]--;
            if(mp[s[j]]==0){
                count--;
            }
            if(count==0){
                while(count==0){
                    if(j-i+1<mn){
                        mn = j-i+1;
                        start = i;
                        end = j;
                    }
                    mp[s[i]]++;
                    if(mp[s[i]]==1){
                        count++;
                    }
                    i++;
                }
            }
            j++;
        }
        string ans="";
        if(mn==INT_MAX)return "-1";
        else{
            for(int i =start;i<=end;i++){
                ans+=s[i];
            }
        }
        return ans;
    }
