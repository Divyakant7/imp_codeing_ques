The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph. The Graph is represented as adjancency matrix, and the matrix denotes the weight of the edegs (if it exists) else -1. Do it in-place.
 

Example 1:

Input: matrix = {{0,25},{-1,0}}
Output: {{0,25},{-1,0}}
Explanation: The shortest distance between
every pair is already given(if it exists).

void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    for(int k = 0;k<matrix.size();k++){
	        for(int i = 0;i<matrix.size();i++){
	            for(int j = 0;j<matrix.size();j++){
	                if(matrix[i][k]==-1||matrix[k][j]==-1){
	                    continue;
	                }
	                else if(matrix[i][j]==-1){
	                    matrix[i][j] = matrix[i][k]+matrix[k][j];
	                }
	                else if(matrix[i][j]>matrix[i][k]+matrix[k][j]){
	                    matrix[i][j] = matrix[i][k]+matrix[k][j];
	                }
	            }
	        }
	    }
	}
