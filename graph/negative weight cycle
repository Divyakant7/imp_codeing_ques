Given a weighted directed graph with n nodes and m edges. Nodes are labeled from 0 to n-1, the task is to check if it contains a negative weight cycle or not.
Note: edges[i] is defined as u, v and weight.
 

Example 1:

Input: n = 3, edges = {{0,1,-1},{1,2,-2},
{2,0,-3}}
Output: 1
Explanation: The graph contains negative weight
cycle as 0->1->2->0 with weight -1,-2,-3,-1.


int isNegativeWeightCycle(int n, vector<vector<int>>edges){
    vector<int> wt(n, INT_MAX);
    wt[0]=0;
    int x;
    for (int i = 0; i < n; ++i) {
        for (auto e : edges) {
            if (wt[e[0]]!=INT_MAX&&(wt[e[0]] + e[2] < wt[e[1]])){
                wt[e[1]] = wt[e[0]] + e[2];
            }
        }
    }
    for (auto e : edges) {
            if (wt[e[0]]!=INT_MAX&&(wt[e[0]] + e[2] < wt[e[1]])){
                return true;
            }
        }
        return false;
	}
