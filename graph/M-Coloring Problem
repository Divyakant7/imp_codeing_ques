Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. Print 1 if it is possible to colour vertices and 0 otherwise.

Example 1:

Input:
N = 4
M = 3
E = 5
Edges[] = {(0,1),(1,2),(2,3),(3,0),(0,2)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.
Example 2:

Input:
N = 3
M = 2
E = 3
Edges[] = {(0,1),(1,2),(0,2)}
Output: 0


bool valid(bool graph[101][101],int node,int color,vector<int>&c){
    for(int j =0;j<c.size();j++){
        if((graph[node][j]==1)&&(color==c[j])){
            return false;
        }
    }
    return true;
}
bool helper(bool graph[101][101],int m,vector<int>&c,int i){
    if(i>=c.size()){
        return true;
    }
    for(int d = 0;d<m;d++){
        if(valid(graph,i,d,c)){
            c[i] = d;
            if(helper(graph,m,c,i+1)){
                return true;
            }
            c[i] = -1;
        }
    }
    return false;
}
bool graphColoring(bool graph[101][101], int m, int V)
{
    // your code here
    vector<int>c(V,-1);
    return helper(graph,m,c,0);
}
