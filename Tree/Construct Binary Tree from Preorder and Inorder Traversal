Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]



int search(vector<int>&inorder,int l,int r,int target){
        int i =0;
        for(i = l;i<=r;i++){
            if(inorder[i]==target){
                return i;
            }
        }
        return i;
    }
    TreeNode* solve(TreeNode *root,vector<int>& inorder,vector<int>& preorder,int l,int h,int &p){
       if(l>h)return NULL;
        root = new TreeNode(preorder[p]);
        p+=1;
        if(l==h){
            return root;
        }
        int i = search(inorder,l,h,preorder[p-1]);
        root->left = solve(root->left,inorder,preorder,l,i-1,p);
        root->right = solve(root->right,inorder,preorder,i+1,h,p);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode *root = NULL;
        int n = preorder.size();
        int p = 0;
        return solve(root,inorder,preorder,0,n-1,p);
    }
