Given a binary tree in which each node element contains a number. Find the maximum possible path sum from one leaf node to another leaf node.

Note: Here Leaf node is a node which is connected to exactly one different node.


Example 1:

Input:      
           3                               
         /    \                          
       4       5                     
      /  \      
    -10   4                          
Output: 16
Explanation:
Maximum Sum lies between leaf node 4 and 5.
4 + 4 + 3 + 5 = 16.
Example 2:

Input:    
            -15                               
         /      \                          
        5         6                      
      /  \       / \
    -8    1     3   9
   /  \              \
  2   -3              0
                     / \
                    4  -1
                       /
                     10  
Output:  27
Explanation:
The maximum possible sum from one leaf node 
to another is (3 + 6 + 9 + 0 + -1 + 10 = 27)

int helper(Node* root,int &result){
        if(!root){
            return 0;
        }
        if(!root->left&&!root->right){
            return root->data;
        }
        int l =helper(root->left,result);
        int r = helper(root->right,result);
        if(root->left&&root->right){
            result = max(result,l+r+root->data);
            return max(l,r)+root->data;
        }
        /*if(root->left){
            result = max(result,l+root->data);
        }
        if(root->left){
            result = max(result,l+root->data);
        }*/
        if(!root->right){
            return l+root->data;
        }
        else if(!root->left){
            return r+root->data;
        }
        
        
}
    int maxPathSum(Node* root)
    {
        // code here
        int result = INT_MIN;
        int x = helper(root,result);
        if(result!=INT_MIN){
            return result;
        }
        return x;
    }
