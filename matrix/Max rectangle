Given a binary matrix M of size n X m. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Example 1:

Input:
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8
Explanation: For the above test case the
matrix will look like
0 1 1 0
1 1 1 1
1 1 1 1
1 1 0 0
the max size rectangle is 
1 1 1 1
1 1 1 1
and area is 4 *2 = 8.

int helper(int v[],int n){
        int i =0,curarea = 0,maxarea = 0;
        stack<int>st;
        for(i =0;i<n;i++){
            while(!st.empty()&&v[st.top()]>=v[i]){
                int tp = st.top();st.pop();
                curarea = (st.empty()?(i*v[tp]):(i-st.top()-1)*v[tp]);
                maxarea = max(maxarea,curarea);
            }
            st.push(i);
        }
        while(!st.empty()){
            int tp = st.top();st.pop();
            curarea = st.empty()?i*v[tp]:(i-st.top()-1)*v[tp];
            maxarea = max(maxarea,curarea);
        }
        return maxarea;
    }
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
        int area = helper(M[0],m);
        for(int i = 1;i<n;i++){
            for(int j = 0;j<m;j++){
                if(M[i][j]==0)M[i][j] = 0;
                else M[i][j]+=M[i-1][j];
            }
            area = max(area,helper(M[i],m));
        }
        return area;
    }
