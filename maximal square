/*
Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4/
int maximalSquare(vector<vector<char>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        int a[n][m];
        for(int i =0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(i==0||j==0){
                    a[i][j] = matrix[i][j]-'0';
                }
                else if(matrix[i][j]=='1'){
                    a[i][j] = min(a[i-1][j],min(a[i][j-1],a[i-1][j-1]))+1;
                }
                else{
                    a[i][j] = 0;
                }
                
            }
        }
        int ans = 0;
        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
                //cout<<a[i][j]<<" ";
                if(ans<a[i][j]){
                    
                    ans = a[i][j];
                }
            }
            //cout<<endl;
        }
        return ans*ans;
    }
