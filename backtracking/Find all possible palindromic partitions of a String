Given a String S, Find all possible Palindromic partitions of the given String.
 

Example 1:

Input:
S = "geeks"
Output:
g e e k s
g ee k s
Explanation:
All possible palindromic partitions
are printed.

vector<vector<string>>ans;
    bool palindrome(string s){
        int j = s.length()-1;
        int i =0;
        while(i<=j){
            if(s[i]!=s[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    void helper(string s,vector<string>v){
        if(s.length()==0){
            ans.push_back(v);
            return;
        }
        for(int i = 0;i<s.length();i++){
            string pre = s.substr(0,i+1);
            string suf = s.substr(i+1);
            if(palindrome(pre)){
                v.push_back(pre);
                helper(suf,v);
                v.pop_back();
            }
        }
        return ;
    }
    vector<vector<string>> allPalindromicPerms(string S) {
        // code here
        vector<string>v;
        helper(S,v);
        return ans;
    }
