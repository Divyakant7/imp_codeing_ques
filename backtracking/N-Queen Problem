The n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens’ placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For eg below figure represents a chessboard [3 1 4 2].



 

Example 1:

Input:
1
Output:
[1]
Explaination:
Only one queen can be placed 
in the single cell available.
Example 2:

Input:
4
Output:
[2 4 1 3 ] [3 1 4 2 ]
Explaination:
These are the 2 possible solutions.
 

Your Task:
You do not need to read input or print anything. Your task is to complete the function nQueen() which takes n as input parameter and returns a list containing all the possible chessboard configurations in sorted order. Return an empty list if no solution exists.

 

Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n2) 


bool valid(int i,int j,int n,vector<vector<int>>&board){
        int row = i-1,col = j-1;
        while(row>=0&&col>=0){
            if(board[row][col]){
                return false;
            }
            row--;col--;
        }
        row = i-1,col = j+1;
        while(row>=0&&col<n){
            if(board[row][col]){
                return false;
            }
            row--;col++;
        }
        row = i-1,col = j;
        while(row>=0){
            if(board[row][col]){
                return false;
            }
            row--;
        }
        return true;
        
    }
    void helper(int row,int n,vector<int>&v,vector<vector<int>>&board,vector<vector<int>>&res){
        if(row>=n){
            res.push_back(v);
            return;
        }
        for(int j = 0;j<n;j++){
            if(valid(row,j,n,board)){
                v.push_back(j+1);
                board[row][j] = 1;
                helper(row+1,n,v,board,res);
                board[row][j] = 0;
                v.pop_back();
            }
        }
        return;
    }
    vector<vector<int>> nQueen(int n) {
        // code here
        vector<int>v;
        vector<vector<int>>res;
        vector<vector<int>>board(n,vector<int>(n,0));
        helper(0,n,v,board,res);
        return res;
    }
